import * as fs from 'fs';
import Jagfile from '../src/js/jagex2/io/Jagfile';
import Model from '../src/js/jagex2/graphics/Model';
import NpcType from '../src/js/jagex2/config/NpcType';
import Bzip from '../src/js/vendor/bzip';

beforeAll(async (): Promise<void> => {
    await Bzip.load(fs.readFileSync('./test/resources/bz2.wasm'));
    const models: Jagfile = new Jagfile(Int8Array.from(fs.readFileSync('./test/resources/models')));
    Model.unpack(models);
});

describe('Model', (): void => {
    describe('lighting', (): void => {
        it('head model woman_brown', (): void => {
            const npc: NpcType = new NpcType(-1);
            npc.heads = new Uint16Array([114, 131]);
            npc.recol_s = new Uint16Array([25238, 8741, 43072, 6798, 8741]);
            npc.recol_d = new Uint16Array([5652, 5784, 4550, 5921, 5784]);

            const modelFromModels: jest.SpyInstance<Model, [models: (Model | null)[], count: number]> = jest.spyOn(Model, 'modelFromModels');
            const model: Model | null = npc.getHeadModel();

            expect(model).not.toBeNull();
            expect(modelFromModels).toHaveBeenCalled();
            expect(modelFromModels).toHaveBeenCalledTimes(1);

            expect(model?.vertexCount).toBe(204);
            expect(model?.faceCount).toBe(350);
            expect(model?.texturedFaceCount).toBe(0);

            expect(model?.vertexX).toStrictEqual(Int32Array.from([-10, -9, 0, -3, -3, -8, -26, -13, -9, 0, 9, 9, 10, 3, 3, 4, -4, -7, -9, -9, -16, -32, -40, -40, -16, -7, 13, 26, 8, 32, 26, 37, 25, 26, 26, 16, 13, 21, 22, 32, 40, 40, 37, 18, 0, 0, 16, 6, 7, 0, 7, 14, 15, 16, 40, 40, 44, 40, 28, 0, -18, -25, -16, -6, -4, 4, -37, -27, -32, -37, -40, -22, -21, -13, -16, -26, -26, -7, 27, 16, 17, 40, 38, 6, -3, 3, 22, 26, 6, -6, -17, -29, -28, -40, -40, -44, -40, -44, -38, -44, 44, 44, -7, -2, 0, 2, 6, -15, -14, -6, -6, -6, 0, 6, 6, -26, -21, -12, 12, 1, -1, 1, -1, 3, -3, -6, -7, -1, 8, 9, 9, 7, 8, 1, -13, -15, -16, -16, -15, -13, -12, -12, -13, -15, -17, -17, -13, -11, -11, 11, 11, 13, 17, 17, 15, 13, 12, 12, 13, 15, 16, 16, 15, 13, -20, -20, 20, 20, 20, 20, -20, -20, -8, -4, -8, -8, -8, -8, -8, -8, -8, 8, 8, 8, 8, 8, 8, 8, 8, 4, -8, -8, 8, 8, -8, -8, 8, 8, -8, 8, 8, 4, -4, -8]));
            expect(model?.vertexY).toStrictEqual(Int32Array.from([14, 15, 16, 13, 11, 2, 13, 14, 17, 19, 17, 15, 14, 13, 11, 2, 2, 2, -2, -2, -14, -6, -10, -2, 32, 31, 14, 13, 2, -30, -23, -27, -56, -36, -35, -36, -30, -23, -21, -6, -10, -18, -54, -72, -68, -52, -38, -37, -35, -29, -24, -26, -19, -14, -2, -10, -18, -22, -38, -58, -72, -56, -38, -37, -36, -36, -27, -23, -30, -54, -18, -21, -23, -30, -36, -35, -36, -35, 14, 32, 21, -14, 2, 31, 54, 54, 54, 51, 50, 50, 21, -38, 14, -14, -22, -18, -10, -14, 2, -22, -14, -22, -24, -22, -22, -22, -22, -19, -26, -22, -5, -5, -12, -5, -5, 51, 54, -22, -22, 2, 2, 2, 2, 0, 0, 2, -2, -5, 2, -2, -2, 2, -2, -5, -24, -24, -23, -21, -20, -20, -21, -23, -25, -25, -23, -21, -19, -21, -23, -23, -21, -19, -21, -23, -25, -25, -23, -21, -20, -20, -21, -23, -24, -24, -36, -52, -52, -36, -68, -80, -80, -68, -56, -76, -96, -104, -60, -60, -80, -44, -48, -60, -48, -44, -80, -104, -60, -56, -96, -76, -32, -44, -44, -32, -20, -40, -40, -20, -20, -20, -8, 4, 4, -8]));
            expect(model?.vertexZ).toStrictEqual(Int32Array.from([-42, -41, -41, -44, -44, -44, -33, -41, -42, -43, -42, -41, -42, -44, -44, -44, -44, -47, -47, -44, -44, -40, -16, -12, -10, -37, -41, -33, -44, -44, -37, -24, -40, -48, -48, -50, -44, -44, -44, -40, -16, -8, 0, 8, -32, -48, -50, -50, -50, -48, -44, -46, -46, -44, -12, -8, -8, 4, 40, 32, 8, -40, -50, -50, -50, -50, -24, -37, -44, 0, -8, -44, -44, -44, -50, -48, -48, -50, 16, -10, 24, 8, -4, -37, -14, -14, 2, 31, 40, 40, 24, 40, 16, 8, 4, -8, -8, 8, -4, 4, 8, 4, -44, -44, -48, -44, -44, -46, -46, -44, -44, -47, -50, -47, -44, 31, 2, -48, -48, -49, -49, -52, -52, -54, -54, -50, -50, -55, -47, -44, -47, -50, -50, -55, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, 36, 52, 52, 36, 12, 24, 24, 12, 48, 28, 52, 80, 56, 72, 104, 104, 72, 72, 72, 104, 104, 80, 56, 48, 52, 28, 88, 60, 60, 88, 76, 60, 60, 76, 60, 60, 72, 104, 104, 72]));

            expect(model?.faceVertexA).toStrictEqual(Int32Array.from([0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 26, 26, 26, 26, 12, 12, 12, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39, 39, 40, 40, 40, 41, 41, 41, 41, 42, 42, 43, 43, 43, 44, 44, 45, 45, 45, 45, 45, 45, 45, 66, 66, 66, 66, 66, 66, 66, 67, 67, 67, 68, 68, 68, 68, 68, 61, 62, 62, 62, 62, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 80, 80, 80, 80, 58, 58, 59, 60, 60, 90, 90, 91, 91, 91, 69, 70, 70, 70, 70, 22, 23, 23, 23, 24, 92, 93, 93, 93, 94, 95, 95, 56, 56, 57, 57, 100, 100, 100, 100, 100, 54, 96, 47, 48, 76, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 72, 72, 72, 73, 102, 102, 103, 103, 103, 103, 103, 104, 105, 105, 105, 105, 106, 108, 109, 20, 20, 24, 24, 24, 115, 108, 108, 102, 72, 118, 118, 118, 118, 16, 16, 120, 120, 122, 122, 122, 122, 17, 18, 18, 18, 18, 19, 19, 15, 128, 128, 128, 128, 121, 123, 123, 123, 124, 124, 124, 129, 129, 129, 130, 130, 130, 113, 133, 133, 127, 77, 28, 25, 9, 9, 10, 134, 134, 134, 134, 134, 134, 142, 142, 142, 142, 142, 142, 149, 149, 149, 149, 149, 149, 156, 156, 156, 156, 156, 156, 164, 164, 167, 168, 168, 168, 171, 164, 165, 165, 172, 172, 172, 176, 177, 177, 177, 177, 181, 181, 181, 181, 181, 186, 187, 187, 189, 189, 180, 180, 180, 182, 182, 182, 183, 183, 183, 183, 184, 184, 185, 185, 191, 191, 191, 192, 192, 192, 193, 193, 194, 195, 196, 196, 197, 197, 197, 194, 194, 194, 198, 199, 200, 200]));
            expect(model?.faceVertexB).toStrictEqual(Int32Array.from([1, 2, 3, 4, 5, 6, 7, 7, 8, 8, 9, 10, 11, 12, 13, 13, 14, 14, 15, 16, 16, 17, 18, 19, 20, 21, 21, 22, 23, 24, 25, 8, 12, 11, 10, 27, 27, 28, 14, 30, 31, 32, 33, 34, 35, 36, 37, 37, 38, 39, 39, 40, 41, 42, 42, 43, 44, 45, 46, 46, 46, 46, 47, 48, 48, 49, 50, 51, 51, 51, 52, 53, 53, 28, 27, 27, 54, 55, 55, 55, 56, 57, 57, 58, 58, 59, 60, 60, 61, 61, 62, 63, 64, 49, 65, 47, 67, 68, 61, 69, 70, 22, 21, 21, 71, 72, 72, 73, 74, 75, 76, 76, 76, 74, 77, 64, 79, 80, 58, 81, 82, 82, 54, 27, 83, 25, 24, 84, 85, 86, 87, 87, 88, 89, 90, 90, 91, 91, 91, 69, 24, 92, 92, 93, 94, 94, 94, 95, 96, 96, 96, 96, 97, 98, 98, 98, 98, 97, 99, 99, 99, 97, 100, 101, 101, 81, 56, 55, 54, 82, 81, 55, 96, 65, 65, 75, 64, 77, 73, 102, 103, 104, 105, 105, 106, 52, 71, 107, 108, 108, 108, 109, 109, 20, 110, 111, 112, 112, 112, 113, 114, 53, 53, 107, 107, 107, 71, 115, 116, 90, 90, 72, 117, 117, 71, 37, 51, 50, 38, 15, 119, 119, 121, 121, 123, 124, 125, 125, 125, 126, 127, 111, 111, 110, 28, 28, 129, 130, 131, 131, 131, 132, 133, 133, 127, 126, 28, 53, 114, 114, 113, 132, 133, 113, 112, 112, 74, 15, 9, 25, 83, 83, 135, 136, 137, 138, 139, 140, 143, 144, 145, 107, 146, 147, 150, 151, 52, 152, 153, 154, 157, 158, 159, 160, 161, 162, 165, 166, 166, 166, 169, 170, 170, 170, 170, 169, 173, 174, 175, 175, 175, 178, 179, 180, 180, 182, 183, 184, 185, 185, 185, 188, 188, 174, 179, 190, 191, 191, 192, 193, 193, 190, 179, 178, 178, 175, 175, 174, 190, 194, 195, 195, 196, 197, 197, 194, 198, 198, 198, 199, 199, 200, 201, 201, 202, 203, 203, 203, 203, 202]));
            expect(model?.faceVertexC).toStrictEqual(Int32Array.from([2, 3, 4, 5, 6, 7, 1, 8, 2, 9, 10, 11, 12, 13, 3, 14, 4, 15, 16, 5, 17, 18, 19, 20, 21, 6, 22, 23, 24, 25, 8, 7, 11, 10, 27, 12, 28, 14, 13, 31, 32, 33, 34, 35, 36, 37, 30, 38, 39, 31, 40, 41, 42, 32, 43, 44, 45, 46, 33, 34, 35, 47, 48, 36, 49, 50, 51, 37, 38, 52, 53, 39, 28, 27, 40, 54, 55, 41, 55, 56, 57, 42, 58, 43, 59, 60, 44, 61, 45, 62, 63, 64, 49, 65, 47, 46, 68, 61, 69, 70, 22, 21, 67, 71, 72, 68, 73, 74, 75, 76, 61, 62, 74, 77, 64, 63, 80, 58, 81, 82, 79, 54, 27, 83, 25, 24, 84, 85, 86, 87, 80, 88, 89, 90, 58, 91, 59, 60, 69, 61, 92, 91, 93, 94, 69, 70, 95, 96, 96, 22, 23, 97, 98, 24, 92, 93, 97, 99, 94, 95, 97, 96, 101, 57, 81, 58, 55, 54, 82, 81, 101, 55, 23, 48, 49, 74, 77, 73, 102, 103, 104, 105, 50, 106, 52, 51, 107, 108, 73, 102, 109, 103, 20, 110, 111, 112, 104, 105, 113, 114, 53, 106, 52, 109, 20, 71, 21, 116, 84, 115, 89, 117, 102, 109, 117, 51, 50, 106, 37, 119, 120, 121, 122, 123, 124, 125, 17, 18, 126, 127, 111, 19, 110, 20, 128, 129, 130, 131, 121, 123, 132, 133, 124, 127, 126, 125, 53, 114, 130, 113, 132, 131, 132, 112, 127, 111, 73, 14, 8, 83, 10, 27, 136, 137, 138, 139, 140, 141, 144, 145, 107, 146, 147, 148, 151, 52, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 164, 165, 169, 166, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 174, 173, 190, 191, 182, 192, 193, 183, 190, 179, 178, 184, 175, 185, 174, 188, 194, 195, 192, 196, 197, 193, 194, 190, 195, 196, 199, 197, 200, 201, 194, 202, 203, 198, 199, 200, 202, 201]));

            expect(model?.faceColorA).toBeNull();
            expect(model?.faceColorB).toBeNull();
            expect(model?.faceColorC).toBeNull();
            expect(model?.faceInfo).toBeNull();
            expect(model?.facePriority).toStrictEqual(Int32Array.from([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))
            expect(model?.faceAlpha).toBeNull();
            expect(model?.faceColor).toStrictEqual(Int32Array.from([1944, 1944, 4550, 4550, 4550, 4550, 1944, 4661, 4661, 4661, 4661, 4661, 1944, 1944, 1944, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 1944, 4661, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 5921, 5921, 5921, 5921, 5921, 5921, 4550, 4550, 5921, 5921, 5921, 5921, 4550, 4550, 4550, 4550, 4550, 127, 127, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 5921, 4550, 4550, 4550, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 5921, 5921, 5921, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 5921, 5921, 5921, 5921, 4550, 5921, 5921, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 5921, 5921, 5921, 5921, 5921, 5921, 4550, 5921, 5921, 5921, 5921, 5921, 4550, 4550, 4550, 5921, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 5921, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 5921, 4550, 5921, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 127, 127, 127, 127, 4550, 4550, 127, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 127, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 4550, 0, 0, 0, 0, 0, 0, 43303, 43303, 43303, 43303, 43303, 43303, 43303, 43303, 43303, 43303, 43303, 43303, 0, 0, 0, 0, 0, 0, 926, 926, 926, 926, 926, 926, 926, 926, 926, 926, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921, 5921]));
            expect(model?.priority).toBe(1);

            expect(model?.texturedVertexA).toStrictEqual(Int32Array.from([]));
            expect(model?.texturedVertexB).toStrictEqual(Int32Array.from([]));
            expect(model?.texturedVertexC).toStrictEqual(Int32Array.from([]));

            expect(model?.minX).toBe(0);
            expect(model?.maxX).toBe(0);

            expect(model?.minZ).toBe(0);
            expect(model?.maxZ).toBe(0);

            expect(model?.minY).toBe(0);
            expect(model?.maxY).toBe(0);

            expect(model?.radius).toBe(0);

            expect(model?.minDepth).toBe(0);
            expect(model?.maxDepth).toBe(0);

            expect(model?.objRaise).toBe(0);

            expect(model?.vertexLabel).toStrictEqual(Int32Array.from([8, 9, 9, 10, 13, 12, 5, 11, 4, 6, 4, 9, 8, 10, 13, 12, 12, 0, 0, 0, 0, 0, 0, 1, 7, 3, 11, 5, 12, 0, 0, 0, 0, 16, 16, 16, 0, 19, 19, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 0, 19, 19, 21, 0, 1, 0, 0, 0, 0, 0, 0, 0, 14, 14, 14, 16, 0, 0, 0, 0, 0, 24, 24, 0, 14, 14, 14, 14, 0, 7, 2, 0, 1, 3, 17, 17, 17, 17, 17, 17, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 24, 0, 0, 0, 19, 23, 24, 24, 0, 0, 0, 0, 0, 17, 17, 25, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
            expect(model?.faceLabel).toBeNull();
            expect(model?.labelVertices).toBeNull();
            expect(model?.labelFaces).toBeNull();
            expect(model?.pickable).toBeFalsy();
            expect(model?.vertexNormal).toBeNull();
            expect(model?.vertexNormalOriginal).toBeNull();
        });


        it('shrimps interface model 2590', (): void => {
            const model: Model = Model.model(2590);
            expect(model.vertexCount).toBe(152);
            expect(model.faceCount).toBe(197);
            expect(model.texturedFaceCount).toBe(0);

            expect(model.vertexX).toStrictEqual(Int32Array.from([21, 17, 21, 26, 27, 22, 16, 17, 17, 16, 12, 12, 17, 20, 23, 29, 30, 24, 25, 21, 23, 13, 26, 14, 13, 15, 16, 12, 11, 13, 14, 16, 12, 10, 19, 18, 10, 19, 21, 21, 14, 21, 21, 22, 16, 22, 22, 11, 11, 0, 10, 5, 1, -1, 4, 5, 7, 6, 4, 3, 1, 0, -1, 0, -2, -5, -2, -1, -10, -11, -7, -10, -26, -11, 4, 2, 3, 5, 3, 0, 1, 1, 7, 4, 0, 0, 0, -7, -1, -1, -3, -3, -8, -3, -3, -7, -11, -8, -8, 1, 2, -3, 0, -21, -17, -12, -14, -16, -23, -25, -19, -18, -16, -12, -7, -8, -10, -11, -11, -9, -10, -9, -23, -21, -21, -14, -27, -24, -8, -7, -8, -7, -6, -5, -5, -5, -6, -6, -13, -14, -14, -10, -17, -17, -14, -19, -19, -19, 5, -5, -5, -5]));
            expect(model.vertexY).toStrictEqual(Int32Array.from([-4, -4, -4, -4, 0, 0, -4, -4, -4, -4, -4, 0, 0, 0, -4, -4, 0, -4, -4, 0, 0, -1, 0, -4, -4, -6, -4, -4, -4, -4, -4, 0, 0, 0, -2, 0, 0, 0, -2, 0, 0, 0, -2, -2, 0, 0, -2, -2, 0, 0, -2, -4, -4, -4, -4, 0, 0, -4, -4, -4, -4, -4, 0, 0, 0, -4, -4, 0, -4, -4, 0, 0, -1, 0, -4, -4, -6, -4, -4, -4, -4, -4, 0, 0, 0, -2, 0, 0, 0, -2, -2, 0, 0, 0, -2, -2, 0, 0, -2, -2, 0, 0, -2, -4, -4, -4, -4, 0, 0, -4, -4, 0, 0, 0, -4, -4, -4, -4, -4, -4, -4, 0, -4, -4, 0, -1, 0, 0, -6, -4, -4, -4, -4, -4, 0, 0, 0, 0, 0, -2, 0, 0, 0, -2, 0, -2, 0, -2, 0, 0, -2, -2]));
            expect(model.vertexZ).toStrictEqual(Int32Array.from([10, 7, 2, 6, 7, 11, 13, 11, 9, 8, 7, 7, 6, 1, -4, -1, -1, -10, -11, -5, -9, -22, -12, 12, 11, 10, 12, 13, 9, 9, 8, 14, 13, 9, 3, 4, 1, 3, 0, 0, -3, -1, -1, -5, -7, -6, -6, 10, 11, 11, 9, -12, -11, -16, -21, -21, -13, -7, -9, -9, -9, -6, -5, -11, -16, -21, -26, -28, -24, -27, -21, -24, -21, -28, -5, -5, -7, -7, -3, -4, -5, -7, -6, -3, -3, -13, -13, -7, -14, -14, -18, -17, -13, -19, -19, -21, -17, -21, -21, -3, -3, 5, -3, 20, 16, 20, 24, 24, 21, 11, 9, 8, 15, 19, 19, 21, 21, 22, 23, 24, 26, 26, 2, 4, 4, -10, 12, 2, 22, 22, 24, 21, 24, 21, 21, 25, 19, 13, 17, 17, 17, 9, 13, 13, 5, 8, 7, 7, 21, 23, 22, 21]));

            expect(model.faceVertexA).toStrictEqual(Int32Array.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 17, 17, 17, 17, 17, 17, 18, 18, 15, 13, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 25, 26, 26, 27, 27, 27, 28, 28, 28, 29, 30, 5, 33, 34, 34, 36, 38, 38, 42, 43, 43, 46, 47, 47, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 53, 53, 53, 54, 54, 54, 68, 68, 68, 68, 68, 68, 68, 69, 69, 66, 64, 74, 74, 74, 74, 75, 75, 75, 76, 76, 76, 76, 76, 77, 77, 78, 78, 78, 79, 79, 79, 80, 81, 56, 84, 85, 85, 89, 90, 90, 94, 95, 95, 98, 99, 99, 102, 103, 103, 103, 103, 103, 103, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 106, 106, 106, 106, 106, 110, 110, 110, 110, 123, 123, 123, 108, 109, 122, 122, 128, 128, 128, 128, 128, 128, 128, 128, 129, 129, 130, 130, 131, 132, 132, 132, 120, 115, 115, 133, 133, 114, 137, 137, 139, 141, 141, 143, 144, 144, 144, 148, 148, 148]));
            expect(model.faceVertexB).toStrictEqual(Int32Array.from([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12, 12, 13, 14, 14, 15, 16, 18, 15, 14, 19, 20, 21, 21, 22, 22, 19, 24, 25, 26, 27, 27, 28, 29, 29, 30, 9, 8, 7, 7, 6, 6, 31, 32, 32, 33, 10, 10, 10, 31, 11, 35, 36, 34, 39, 40, 42, 19, 44, 46, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 60, 61, 62, 63, 63, 64, 65, 65, 66, 67, 69, 66, 65, 70, 71, 71, 72, 72, 73, 73, 70, 75, 76, 77, 78, 78, 79, 80, 80, 81, 60, 59, 58, 58, 57, 57, 82, 83, 83, 84, 61, 61, 61, 82, 62, 86, 87, 89, 91, 92, 94, 70, 96, 98, 100, 101, 102, 104, 105, 106, 107, 108, 109, 109, 110, 111, 112, 112, 113, 114, 115, 116, 117, 117, 118, 119, 120, 121, 109, 122, 123, 124, 122, 125, 124, 126, 126, 126, 127, 129, 130, 119, 118, 117, 116, 115, 131, 131, 132, 132, 120, 133, 133, 134, 135, 135, 114, 133, 114, 136, 113, 138, 139, 137, 142, 143, 141, 111, 145, 147, 149, 150, 151]));
            expect(model.faceVertexC).toStrictEqual(Int32Array.from([2, 3, 4, 5, 6, 7, 8, 9, 1, 10, 11, 12, 2, 13, 14, 3, 15, 16, 4, 15, 14, 19, 20, 21, 18, 22, 15, 16, 14, 25, 26, 27, 24, 28, 29, 25, 30, 9, 8, 7, 26, 6, 27, 31, 32, 28, 33, 10, 29, 30, 9, 6, 10, 36, 37, 34, 40, 41, 40, 44, 45, 44, 49, 33, 49, 53, 54, 55, 56, 57, 58, 59, 60, 52, 61, 62, 63, 53, 64, 65, 54, 66, 67, 55, 66, 65, 70, 71, 68, 72, 69, 73, 66, 67, 65, 76, 77, 78, 75, 79, 80, 76, 81, 60, 59, 58, 77, 57, 78, 82, 83, 79, 84, 61, 80, 81, 60, 57, 61, 87, 88, 87, 92, 93, 92, 96, 97, 96, 101, 84, 101, 105, 106, 107, 108, 109, 104, 110, 111, 112, 105, 113, 114, 115, 116, 117, 106, 118, 119, 120, 121, 107, 122, 123, 124, 111, 125, 124, 123, 109, 122, 127, 125, 130, 119, 118, 117, 116, 115, 131, 129, 132, 130, 120, 119, 132, 134, 135, 120, 121, 133, 131, 136, 134, 136, 139, 140, 139, 143, 142, 143, 145, 146, 147, 150, 134, 151]));

            expect(model.faceColorA).toBeNull();
            expect(model.faceColorB).toBeNull();
            expect(model.faceColorC).toBeNull();
            expect(model.faceInfo).toBeNull();
            expect(model.facePriority).toBeNull();
            expect(model.faceAlpha).toBeNull();
            expect(model.faceColor).toStrictEqual(Int32Array.from([6080, 6080, 6080, 6080, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 6080, 6080, 6080, 6080, 6080, 6080, 4032, 4032, 4032, 6080, 6080, 6080, 6080, 4032, 0, 0, 4032, 4032, 4032, 4032, 0, 0, 0, 0, 0, 0, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 6080, 6080, 6080, 6080, 6080, 6080, 4032, 4032, 4032, 4032, 6080, 6080, 6080, 6080, 4032, 0, 0, 4032, 4032, 4032, 4032, 0, 0, 0, 0, 0, 0, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 6080, 6080, 4032, 4032, 6080, 4032, 4032, 6080, 6080, 6080, 6080, 0, 0, 0, 0, 0, 0, 0, 0, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080]));

            expect(model.priority).toBe(0);

            expect(model.texturedVertexA).toStrictEqual(Int32Array.from([]));
            expect(model.texturedVertexB).toStrictEqual(Int32Array.from([]));
            expect(model.texturedVertexC).toStrictEqual(Int32Array.from([]));

            expect(model.minX).toBe(0);
            expect(model.maxX).toBe(0);

            expect(model.minZ).toBe(0);
            expect(model.maxZ).toBe(0);

            expect(model.minY).toBe(0);
            expect(model.maxY).toBe(0);

            expect(model.radius).toBe(0);

            expect(model.minDepth).toBe(0);
            expect(model.maxDepth).toBe(0);

            expect(model.objRaise).toBe(0);

            expect(model.vertexLabel).toBeNull();
            expect(model.faceLabel).toBeNull();
            expect(model.labelVertices).toBeNull();
            expect(model.labelFaces).toBeNull();
            expect(model.pickable).toBeFalsy();
            expect(model.vertexNormal).toBeNull();
            expect(model.vertexNormalOriginal).toBeNull();

            model.calculateNormals(64, 768, -50, -10, -50, true);
            model.pickable = true;

            expect(model.vertexCount).toBe(152);
            expect(model.faceCount).toBe(197);

            expect(model.vertexCount).toBe(152);
            expect(model.faceCount).toBe(197);
            expect(model.texturedFaceCount).toBe(0);

            expect(model.vertexX).toStrictEqual(Int32Array.from([21, 17, 21, 26, 27, 22, 16, 17, 17, 16, 12, 12, 17, 20, 23, 29, 30, 24, 25, 21, 23, 13, 26, 14, 13, 15, 16, 12, 11, 13, 14, 16, 12, 10, 19, 18, 10, 19, 21, 21, 14, 21, 21, 22, 16, 22, 22, 11, 11, 0, 10, 5, 1, -1, 4, 5, 7, 6, 4, 3, 1, 0, -1, 0, -2, -5, -2, -1, -10, -11, -7, -10, -26, -11, 4, 2, 3, 5, 3, 0, 1, 1, 7, 4, 0, 0, 0, -7, -1, -1, -3, -3, -8, -3, -3, -7, -11, -8, -8, 1, 2, -3, 0, -21, -17, -12, -14, -16, -23, -25, -19, -18, -16, -12, -7, -8, -10, -11, -11, -9, -10, -9, -23, -21, -21, -14, -27, -24, -8, -7, -8, -7, -6, -5, -5, -5, -6, -6, -13, -14, -14, -10, -17, -17, -14, -19, -19, -19, 5, -5, -5, -5]));
            expect(model.vertexY).toStrictEqual(Int32Array.from([-4, -4, -4, -4, 0, 0, -4, -4, -4, -4, -4, 0, 0, 0, -4, -4, 0, -4, -4, 0, 0, -1, 0, -4, -4, -6, -4, -4, -4, -4, -4, 0, 0, 0, -2, 0, 0, 0, -2, 0, 0, 0, -2, -2, 0, 0, -2, -2, 0, 0, -2, -4, -4, -4, -4, 0, 0, -4, -4, -4, -4, -4, 0, 0, 0, -4, -4, 0, -4, -4, 0, 0, -1, 0, -4, -4, -6, -4, -4, -4, -4, -4, 0, 0, 0, -2, 0, 0, 0, -2, -2, 0, 0, 0, -2, -2, 0, 0, -2, -2, 0, 0, -2, -4, -4, -4, -4, 0, 0, -4, -4, 0, 0, 0, -4, -4, -4, -4, -4, -4, -4, 0, -4, -4, 0, -1, 0, 0, -6, -4, -4, -4, -4, -4, 0, 0, 0, 0, 0, -2, 0, 0, 0, -2, 0, -2, 0, -2, 0, 0, -2, -2]));
            expect(model.vertexZ).toStrictEqual(Int32Array.from([10, 7, 2, 6, 7, 11, 13, 11, 9, 8, 7, 7, 6, 1, -4, -1, -1, -10, -11, -5, -9, -22, -12, 12, 11, 10, 12, 13, 9, 9, 8, 14, 13, 9, 3, 4, 1, 3, 0, 0, -3, -1, -1, -5, -7, -6, -6, 10, 11, 11, 9, -12, -11, -16, -21, -21, -13, -7, -9, -9, -9, -6, -5, -11, -16, -21, -26, -28, -24, -27, -21, -24, -21, -28, -5, -5, -7, -7, -3, -4, -5, -7, -6, -3, -3, -13, -13, -7, -14, -14, -18, -17, -13, -19, -19, -21, -17, -21, -21, -3, -3, 5, -3, 20, 16, 20, 24, 24, 21, 11, 9, 8, 15, 19, 19, 21, 21, 22, 23, 24, 26, 26, 2, 4, 4, -10, 12, 2, 22, 22, 24, 21, 24, 21, 21, 25, 19, 13, 17, 17, 17, 9, 13, 13, 5, 8, 7, 7, 21, 23, 22, 21]));

            expect(model.faceVertexA).toStrictEqual(Int32Array.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 17, 17, 17, 17, 17, 17, 18, 18, 15, 13, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 25, 26, 26, 27, 27, 27, 28, 28, 28, 29, 30, 5, 33, 34, 34, 36, 38, 38, 42, 43, 43, 46, 47, 47, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 53, 53, 53, 54, 54, 54, 68, 68, 68, 68, 68, 68, 68, 69, 69, 66, 64, 74, 74, 74, 74, 75, 75, 75, 76, 76, 76, 76, 76, 77, 77, 78, 78, 78, 79, 79, 79, 80, 81, 56, 84, 85, 85, 89, 90, 90, 94, 95, 95, 98, 99, 99, 102, 103, 103, 103, 103, 103, 103, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 106, 106, 106, 106, 106, 110, 110, 110, 110, 123, 123, 123, 108, 109, 122, 122, 128, 128, 128, 128, 128, 128, 128, 128, 129, 129, 130, 130, 131, 132, 132, 132, 120, 115, 115, 133, 133, 114, 137, 137, 139, 141, 141, 143, 144, 144, 144, 148, 148, 148]));
            expect(model.faceVertexB).toStrictEqual(Int32Array.from([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12, 12, 13, 14, 14, 15, 16, 18, 15, 14, 19, 20, 21, 21, 22, 22, 19, 24, 25, 26, 27, 27, 28, 29, 29, 30, 9, 8, 7, 7, 6, 6, 31, 32, 32, 33, 10, 10, 10, 31, 11, 35, 36, 34, 39, 40, 42, 19, 44, 46, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 60, 61, 62, 63, 63, 64, 65, 65, 66, 67, 69, 66, 65, 70, 71, 71, 72, 72, 73, 73, 70, 75, 76, 77, 78, 78, 79, 80, 80, 81, 60, 59, 58, 58, 57, 57, 82, 83, 83, 84, 61, 61, 61, 82, 62, 86, 87, 89, 91, 92, 94, 70, 96, 98, 100, 101, 102, 104, 105, 106, 107, 108, 109, 109, 110, 111, 112, 112, 113, 114, 115, 116, 117, 117, 118, 119, 120, 121, 109, 122, 123, 124, 122, 125, 124, 126, 126, 126, 127, 129, 130, 119, 118, 117, 116, 115, 131, 131, 132, 132, 120, 133, 133, 134, 135, 135, 114, 133, 114, 136, 113, 138, 139, 137, 142, 143, 141, 111, 145, 147, 149, 150, 151]));
            expect(model.faceVertexC).toStrictEqual(Int32Array.from([2, 3, 4, 5, 6, 7, 8, 9, 1, 10, 11, 12, 2, 13, 14, 3, 15, 16, 4, 15, 14, 19, 20, 21, 18, 22, 15, 16, 14, 25, 26, 27, 24, 28, 29, 25, 30, 9, 8, 7, 26, 6, 27, 31, 32, 28, 33, 10, 29, 30, 9, 6, 10, 36, 37, 34, 40, 41, 40, 44, 45, 44, 49, 33, 49, 53, 54, 55, 56, 57, 58, 59, 60, 52, 61, 62, 63, 53, 64, 65, 54, 66, 67, 55, 66, 65, 70, 71, 68, 72, 69, 73, 66, 67, 65, 76, 77, 78, 75, 79, 80, 76, 81, 60, 59, 58, 77, 57, 78, 82, 83, 79, 84, 61, 80, 81, 60, 57, 61, 87, 88, 87, 92, 93, 92, 96, 97, 96, 101, 84, 101, 105, 106, 107, 108, 109, 104, 110, 111, 112, 105, 113, 114, 115, 116, 117, 106, 118, 119, 120, 121, 107, 122, 123, 124, 111, 125, 124, 123, 109, 122, 127, 125, 130, 119, 118, 117, 116, 115, 131, 129, 132, 130, 120, 119, 132, 134, 135, 120, 121, 133, 131, 136, 134, 136, 139, 140, 139, 143, 142, 143, 145, 146, 147, 150, 134, 151]));

            expect(model.faceColorA).toStrictEqual(Int32Array.from([6039, 6039, 6039, 6039, 3991, 3991, 3991, 3991, 3991, 4021, 4021, 4021, 4021, 4023, 4023, 6071, 6032, 6032, 6032, 6065, 6065, 4017, 4017, 4017, 6065, 6050, 6050, 6040, 4038, 2, 2, 3999, 3999, 4010, 4010, 2, 2, 2, 2, 2, 2, 3995, 3995, 3999, 3999, 3999, 4016, 4016, 4016, 4016, 4018, 3970, 4033, 6050, 6050, 6051, 6050, 6050, 6048, 6052, 6052, 6048, 6052, 6052, 6048, 6045, 6045, 6045, 6045, 3997, 3997, 3997, 3997, 3997, 4017, 4017, 4017, 4017, 4009, 4009, 6057, 6048, 6048, 6048, 6045, 6045, 3997, 3997, 3997, 3997, 6045, 6068, 6068, 6061, 4008, 2, 2, 3990, 3990, 3995, 3995, 2, 2, 2, 2, 2, 2, 3996, 3996, 3988, 3988, 3988, 4000, 4000, 4000, 4004, 4017, 3979, 4014, 6046, 6046, 6048, 6050, 6050, 6048, 6048, 6048, 6048, 6049, 6049, 6048, 6050, 6050, 6050, 6050, 6050, 6050, 6046, 3998, 3998, 3998, 4008, 4008, 4008, 4008, 4008, 4008, 3998, 3998, 3998, 3998, 3998, 6044, 6044, 3996, 3996, 6040, 3992, 3992, 6054, 6062, 6070, 6070, 2, 2, 2, 2, 2, 2, 2, 2, 3986, 3986, 3990, 3990, 4003, 3988, 3988, 3988, 3988, 4014, 4014, 3993, 3993, 4015, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048]));
            expect(model.faceColorB).toStrictEqual(Int32Array.from([6069, 6071, 6032, 6018, 3970, 3985, 3995, 3999, 4009, 4009, 4019, 4036, 4040, 4040, 4038, 6068, 6068, 6040, 6018, 6050, 6040, 4020, 4022, 4023, 6056, 6056, 6040, 6040, 4022, 2, 2, 3995, 3999, 3999, 4016, 2, 2, 2, 2, 2, 2, 3995, 3985, 3985, 3970, 4004, 4004, 4033, 4019, 4019, 4019, 3970, 4036, 6036, 6051, 6050, 6032, 6049, 6048, 6070, 6051, 6048, 6023, 6051, 6048, 6065, 6057, 6048, 6034, 3979, 3989, 4009, 4019, 4013, 4013, 4015, 4029, 4023, 4023, 4008, 6050, 6050, 6061, 6059, 6068, 6061, 4002, 3987, 3988, 3988, 6052, 6052, 6080, 6080, 3987, 2, 2, 3996, 3988, 3988, 4000, 2, 2, 2, 2, 2, 2, 4009, 3989, 3989, 3970, 3970, 3970, 4014, 4015, 4015, 4015, 3970, 4029, 6018, 6047, 6048, 6018, 6049, 6048, 6035, 6048, 6048, 6018, 6048, 6048, 6046, 6056, 6046, 6034, 6054, 6062, 6062, 3996, 3980, 3996, 3996, 4022, 4015, 4014, 4019, 4015, 4015, 4008, 3998, 3988, 3976, 6062, 6070, 3992, 3985, 6070, 4002, 3985, 6078, 6078, 6078, 6088, 2, 2, 2, 2, 2, 2, 2, 2, 4003, 3988, 3988, 3988, 3993, 3993, 3987, 3970, 3970, 4015, 3993, 4015, 4005, 4022, 6018, 6048, 6048, 6048, 6048, 6048, 6028, 6048, 6048, 6018, 6048, 6048]));
            expect(model.faceColorC).toStrictEqual(Int32Array.from([6071, 6032, 6018, 6018, 3985, 3995, 3999, 4009, 4021, 4019, 4036, 4040, 4023, 4038, 4020, 6032, 6040, 6018, 6018, 6040, 6068, 4022, 4023, 4008, 6050, 6040, 6040, 6018, 4020, 2, 2, 3999, 4010, 4016, 4016, 2, 2, 2, 2, 2, 2, 3985, 3999, 3970, 4004, 4016, 4033, 4019, 4016, 4018, 4009, 3985, 4019, 6051, 6071, 6050, 6049, 6069, 6049, 6051, 6073, 6051, 6051, 6081, 6051, 6057, 6048, 6034, 6027, 3989, 4009, 4019, 4013, 4017, 4015, 4029, 4023, 4009, 4008, 4002, 6048, 6061, 6059, 6034, 6061, 6050, 3987, 3988, 3997, 4004, 6068, 6080, 6061, 6059, 4002, 2, 2, 3988, 3995, 4000, 4004, 2, 2, 2, 2, 2, 2, 3989, 3988, 3970, 3970, 4000, 4014, 4015, 4004, 4017, 4013, 3989, 4015, 6047, 6086, 6047, 6049, 6091, 6049, 6048, 6092, 6048, 6048, 6062, 6048, 6056, 6046, 6034, 6054, 6062, 6046, 6044, 3980, 3996, 4008, 4022, 4015, 4014, 4019, 4015, 3998, 4008, 3998, 3988, 3976, 3986, 6070, 6040, 3985, 3980, 6050, 3985, 3992, 6062, 6070, 6088, 6050, 2, 2, 2, 2, 2, 2, 2, 2, 3988, 3990, 3988, 3998, 3988, 3987, 3970, 3988, 3976, 3993, 4003, 4005, 3987, 4005, 6048, 6090, 6048, 6048, 6048, 6048, 6048, 6088, 6048, 6048, 6035, 6048]));
            expect(model.faceInfo).toBeNull();
            expect(model.facePriority).toBeNull();
            expect(model.faceAlpha).toBeNull();
            expect(model.faceColor).toBeNull();

            expect(model.priority).toBe(0);

            expect(model.texturedVertexA).toStrictEqual(Int32Array.from([]));
            expect(model.texturedVertexB).toStrictEqual(Int32Array.from([]));
            expect(model.texturedVertexC).toStrictEqual(Int32Array.from([]));

            expect(model.minX).toBe(0);
            expect(model.maxX).toBe(0);

            expect(model.minZ).toBe(0);
            expect(model.maxZ).toBe(0);

            expect(model.minY).toBe(0);
            expect(model.maxY).toBe(6);

            expect(model.radius).toBe(34);

            expect(model.minDepth).toBe(35);
            expect(model.maxDepth).toBe(69);

            expect(model.objRaise).toBe(0);

            expect(model.vertexLabel).toBeNull();
            expect(model.faceLabel).toBeNull();
            expect(model.labelVertices).toBeNull();
            expect(model.labelFaces).toBeNull();
            expect(model.vertexNormal).toBeNull();
            expect(model.vertexNormalOriginal).toBeNull();

            expect(model.pickable).toBeTruthy();
        });
    });

    describe('unpacking', (): void => {
        it('model 2338', (): void => { // the first model in the cache
            const model: Model = Model.model(2338);
            expect(model.vertexCount).toBe(30);
            expect(model.faceCount).toBe(40);
            expect(model.texturedFaceCount).toBe(0);

            expect(model.vertexX).toStrictEqual(Int32Array.from([-19, -24, -11, -6, 0, 2, 11, 15, 28, 26, -8, 0, 11, 31, 0, 11, 31, 11, 28, 9, 26, 0, -6, -27, -5, -12, -26, -30, -27, -17]));
            expect(model.vertexY).toStrictEqual(Int32Array.from([0, 0, -4, 0, -4, 0, -2, 0, -2, 0, -4, -2, -4, -2, -4, -4, -2, -4, 0, 0, 0, -2, -4, 0, 0, -4, -2, 0, 0, 0]));
            expect(model.vertexZ).toStrictEqual(Int32Array.from([30, 25, 20, 35, 20, 35, 20, 35, 20, 32, 12, 10, 10, 8, 0, 0, -2, -10, -12, -25, -22, -10, 0, 16, -25, -10, 6, -5, -16, -23]));

            expect(model.faceVertexA).toStrictEqual(Int32Array.from([0, 0, 3, 3, 5, 5, 7, 7, 2, 2, 4, 4, 6, 6, 11, 11, 12, 12, 15, 15, 17, 17, 14, 14, 10, 10, 1, 1, 21, 21, 22, 22, 23, 23, 26, 26, 27, 27, 25, 25]));
            expect(model.faceVertexB).toStrictEqual(Int32Array.from([1, 2, 2, 4, 4, 6, 6, 8, 10, 11, 11, 12, 12, 13, 14, 15, 15, 16, 17, 18, 19, 20, 21, 17, 22, 14, 23, 10, 24, 19, 25, 21, 26, 22, 27, 25, 28, 29, 29, 24]));
            expect(model.faceVertexC).toStrictEqual(Int32Array.from([2, 3, 4, 5, 6, 7, 8, 9, 11, 4, 12, 6, 13, 8, 15, 12, 16, 13, 18, 16, 20, 18, 17, 15, 14, 11, 10, 2, 19, 17, 21, 14, 22, 10, 25, 22, 29, 25, 24, 21]));

            expect(model.faceColorA).toBeNull();
            expect(model.faceColorB).toBeNull();
            expect(model.faceColorC).toBeNull();
            expect(model.faceInfo).toBeNull();
            expect(model.facePriority).toBeNull();
            expect(model.faceAlpha).toBeNull();
            expect(model.faceColor).toStrictEqual(Int32Array.from([127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127]));

            expect(model.priority).toBe(0);

            expect(model.texturedVertexA).toStrictEqual(Int32Array.from([]));
            expect(model.texturedVertexB).toStrictEqual(Int32Array.from([]));
            expect(model.texturedVertexC).toStrictEqual(Int32Array.from([]));

            expect(model.minX).toBe(0);
            expect(model.maxX).toBe(0);

            expect(model.minZ).toBe(0);
            expect(model.maxZ).toBe(0);

            expect(model.minY).toBe(0);
            expect(model.maxY).toBe(0);

            expect(model.radius).toBe(0);

            expect(model.minDepth).toBe(0);
            expect(model.maxDepth).toBe(0);

            expect(model.objRaise).toBe(0);

            expect(model.vertexLabel).toBeNull();
            expect(model.faceLabel).toBeNull();
            expect(model.labelVertices).toBeNull();
            expect(model.labelFaces).toBeNull();
            expect(model.pickable).toBeFalsy();
            expect(model.vertexNormal).toBeNull();
            expect(model.vertexNormalOriginal).toBeNull();
        });

        it('shrimps model 2590', (): void => {
            const model: Model = Model.model(2590);
            expect(model.vertexCount).toBe(152);
            expect(model.faceCount).toBe(197);
            expect(model.texturedFaceCount).toBe(0);

            expect(model.vertexX).toStrictEqual(Int32Array.from([21, 17, 21, 26, 27, 22, 16, 17, 17, 16, 12, 12, 17, 20, 23, 29, 30, 24, 25, 21, 23, 13, 26, 14, 13, 15, 16, 12, 11, 13, 14, 16, 12, 10, 19, 18, 10, 19, 21, 21, 14, 21, 21, 22, 16, 22, 22, 11, 11, 0, 10, 5, 1, -1, 4, 5, 7, 6, 4, 3, 1, 0, -1, 0, -2, -5, -2, -1, -10, -11, -7, -10, -26, -11, 4, 2, 3, 5, 3, 0, 1, 1, 7, 4, 0, 0, 0, -7, -1, -1, -3, -3, -8, -3, -3, -7, -11, -8, -8, 1, 2, -3, 0, -21, -17, -12, -14, -16, -23, -25, -19, -18, -16, -12, -7, -8, -10, -11, -11, -9, -10, -9, -23, -21, -21, -14, -27, -24, -8, -7, -8, -7, -6, -5, -5, -5, -6, -6, -13, -14, -14, -10, -17, -17, -14, -19, -19, -19, 5, -5, -5, -5]));
            expect(model.vertexY).toStrictEqual(Int32Array.from([-4, -4, -4, -4, 0, 0, -4, -4, -4, -4, -4, 0, 0, 0, -4, -4, 0, -4, -4, 0, 0, -1, 0, -4, -4, -6, -4, -4, -4, -4, -4, 0, 0, 0, -2, 0, 0, 0, -2, 0, 0, 0, -2, -2, 0, 0, -2, -2, 0, 0, -2, -4, -4, -4, -4, 0, 0, -4, -4, -4, -4, -4, 0, 0, 0, -4, -4, 0, -4, -4, 0, 0, -1, 0, -4, -4, -6, -4, -4, -4, -4, -4, 0, 0, 0, -2, 0, 0, 0, -2, -2, 0, 0, 0, -2, -2, 0, 0, -2, -2, 0, 0, -2, -4, -4, -4, -4, 0, 0, -4, -4, 0, 0, 0, -4, -4, -4, -4, -4, -4, -4, 0, -4, -4, 0, -1, 0, 0, -6, -4, -4, -4, -4, -4, 0, 0, 0, 0, 0, -2, 0, 0, 0, -2, 0, -2, 0, -2, 0, 0, -2, -2]));
            expect(model.vertexZ).toStrictEqual(Int32Array.from([10, 7, 2, 6, 7, 11, 13, 11, 9, 8, 7, 7, 6, 1, -4, -1, -1, -10, -11, -5, -9, -22, -12, 12, 11, 10, 12, 13, 9, 9, 8, 14, 13, 9, 3, 4, 1, 3, 0, 0, -3, -1, -1, -5, -7, -6, -6, 10, 11, 11, 9, -12, -11, -16, -21, -21, -13, -7, -9, -9, -9, -6, -5, -11, -16, -21, -26, -28, -24, -27, -21, -24, -21, -28, -5, -5, -7, -7, -3, -4, -5, -7, -6, -3, -3, -13, -13, -7, -14, -14, -18, -17, -13, -19, -19, -21, -17, -21, -21, -3, -3, 5, -3, 20, 16, 20, 24, 24, 21, 11, 9, 8, 15, 19, 19, 21, 21, 22, 23, 24, 26, 26, 2, 4, 4, -10, 12, 2, 22, 22, 24, 21, 24, 21, 21, 25, 19, 13, 17, 17, 17, 9, 13, 13, 5, 8, 7, 7, 21, 23, 22, 21]));

            expect(model.faceVertexA).toStrictEqual(Int32Array.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 17, 17, 17, 17, 17, 17, 18, 18, 15, 13, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 25, 26, 26, 27, 27, 27, 28, 28, 28, 29, 30, 5, 33, 34, 34, 36, 38, 38, 42, 43, 43, 46, 47, 47, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 53, 53, 53, 54, 54, 54, 68, 68, 68, 68, 68, 68, 68, 69, 69, 66, 64, 74, 74, 74, 74, 75, 75, 75, 76, 76, 76, 76, 76, 77, 77, 78, 78, 78, 79, 79, 79, 80, 81, 56, 84, 85, 85, 89, 90, 90, 94, 95, 95, 98, 99, 99, 102, 103, 103, 103, 103, 103, 103, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 106, 106, 106, 106, 106, 110, 110, 110, 110, 123, 123, 123, 108, 109, 122, 122, 128, 128, 128, 128, 128, 128, 128, 128, 129, 129, 130, 130, 131, 132, 132, 132, 120, 115, 115, 133, 133, 114, 137, 137, 139, 141, 141, 143, 144, 144, 144, 148, 148, 148]));
            expect(model.faceVertexB).toStrictEqual(Int32Array.from([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12, 12, 13, 14, 14, 15, 16, 18, 15, 14, 19, 20, 21, 21, 22, 22, 19, 24, 25, 26, 27, 27, 28, 29, 29, 30, 9, 8, 7, 7, 6, 6, 31, 32, 32, 33, 10, 10, 10, 31, 11, 35, 36, 34, 39, 40, 42, 19, 44, 46, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 60, 61, 62, 63, 63, 64, 65, 65, 66, 67, 69, 66, 65, 70, 71, 71, 72, 72, 73, 73, 70, 75, 76, 77, 78, 78, 79, 80, 80, 81, 60, 59, 58, 58, 57, 57, 82, 83, 83, 84, 61, 61, 61, 82, 62, 86, 87, 89, 91, 92, 94, 70, 96, 98, 100, 101, 102, 104, 105, 106, 107, 108, 109, 109, 110, 111, 112, 112, 113, 114, 115, 116, 117, 117, 118, 119, 120, 121, 109, 122, 123, 124, 122, 125, 124, 126, 126, 126, 127, 129, 130, 119, 118, 117, 116, 115, 131, 131, 132, 132, 120, 133, 133, 134, 135, 135, 114, 133, 114, 136, 113, 138, 139, 137, 142, 143, 141, 111, 145, 147, 149, 150, 151]));
            expect(model.faceVertexC).toStrictEqual(Int32Array.from([2, 3, 4, 5, 6, 7, 8, 9, 1, 10, 11, 12, 2, 13, 14, 3, 15, 16, 4, 15, 14, 19, 20, 21, 18, 22, 15, 16, 14, 25, 26, 27, 24, 28, 29, 25, 30, 9, 8, 7, 26, 6, 27, 31, 32, 28, 33, 10, 29, 30, 9, 6, 10, 36, 37, 34, 40, 41, 40, 44, 45, 44, 49, 33, 49, 53, 54, 55, 56, 57, 58, 59, 60, 52, 61, 62, 63, 53, 64, 65, 54, 66, 67, 55, 66, 65, 70, 71, 68, 72, 69, 73, 66, 67, 65, 76, 77, 78, 75, 79, 80, 76, 81, 60, 59, 58, 77, 57, 78, 82, 83, 79, 84, 61, 80, 81, 60, 57, 61, 87, 88, 87, 92, 93, 92, 96, 97, 96, 101, 84, 101, 105, 106, 107, 108, 109, 104, 110, 111, 112, 105, 113, 114, 115, 116, 117, 106, 118, 119, 120, 121, 107, 122, 123, 124, 111, 125, 124, 123, 109, 122, 127, 125, 130, 119, 118, 117, 116, 115, 131, 129, 132, 130, 120, 119, 132, 134, 135, 120, 121, 133, 131, 136, 134, 136, 139, 140, 139, 143, 142, 143, 145, 146, 147, 150, 134, 151]));

            expect(model.faceColorA).toBeNull();
            expect(model.faceColorB).toBeNull();
            expect(model.faceColorC).toBeNull();
            expect(model.faceInfo).toBeNull();
            expect(model.facePriority).toBeNull();
            expect(model.faceAlpha).toBeNull();
            expect(model.faceColor).toStrictEqual(Int32Array.from([6080, 6080, 6080, 6080, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 6080, 6080, 6080, 6080, 6080, 6080, 4032, 4032, 4032, 6080, 6080, 6080, 6080, 4032, 0, 0, 4032, 4032, 4032, 4032, 0, 0, 0, 0, 0, 0, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 6080, 6080, 6080, 6080, 6080, 6080, 4032, 4032, 4032, 4032, 6080, 6080, 6080, 6080, 4032, 0, 0, 4032, 4032, 4032, 4032, 0, 0, 0, 0, 0, 0, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 6080, 6080, 4032, 4032, 6080, 4032, 4032, 6080, 6080, 6080, 6080, 0, 0, 0, 0, 0, 0, 0, 0, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080, 6080]));

            expect(model.priority).toBe(0);

            expect(model.texturedVertexA).toStrictEqual(Int32Array.from([]));
            expect(model.texturedVertexB).toStrictEqual(Int32Array.from([]));
            expect(model.texturedVertexC).toStrictEqual(Int32Array.from([]));

            expect(model.minX).toBe(0);
            expect(model.maxX).toBe(0);

            expect(model.minZ).toBe(0);
            expect(model.maxZ).toBe(0);

            expect(model.minY).toBe(0);
            expect(model.maxY).toBe(0);

            expect(model.radius).toBe(0);

            expect(model.minDepth).toBe(0);
            expect(model.maxDepth).toBe(0);

            expect(model.objRaise).toBe(0);

            expect(model.vertexLabel).toBeNull();
            expect(model.faceLabel).toBeNull();
            expect(model.labelVertices).toBeNull();
            expect(model.labelFaces).toBeNull();
            expect(model.pickable).toBeFalsy();
            expect(model.vertexNormal).toBeNull();
            expect(model.vertexNormalOriginal).toBeNull();
        });
    });
});
